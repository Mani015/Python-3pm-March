1.Model in the MVT pattern is responsible for rendering the UI
a).False
2.A Django Project can have more than one application
a).True
3.Which of the following command should be used to create a Django Project?
a).django-admin startproject projectName
4.Which of the following class is used to return a response  from a view function?
a).HttpResponse
5.The 'path' method used for configuring URLs is present in which of the following ?
a).django.urls
6.Which of the following commands is used to run the app?
a).python manage.py runserver
7.Which of the following tags can be used in the template to render data that comes from a view?
a).{{}}
8.Which of the following properties is used to configure the template folder under settings.py?
a).DIRS
9.Which of the below should be used before using static content in our templates?
a).{% load static %}
----------------------------------------------------------------------------------------------
MODELS:
1).Which of the following should a model class inherit/extend?
a).models.Model

2).Which of the following should be used to load data from the database using the Employee model?
a).Employee.object.all()

3).Which of the following should be used to execute migrations on the database..?
a).python manage.py migrate
---------------------------------------------------------------------
ORM:
1.Which of the following method should be used to fetch records based on some condition
a).filter()
2.Which of the following can be used for NOT Queries?
a).exclude()
3.Which of the following functions  aggregate methods can be used to calculate average of a particular field?
a).Avg()
--------------------------------------------------------------------------------------------
FORMS:




1. What is Django? And why is it used?
Django is a high-level Python web framework that enables the rapid development of secure and maintainable websites.
 It's free and open source. 
It takes care of much of the hassle of web development and allows you to focus on writing apps without any need to reinvent the wheel. 

The purpose behind developing this framework is to make developers spend time on new application components instead of already developed components.

The Django framework is fast and flexible.
Suits for any web app development 
It's secure and Scalable.
Portable
---------------------------------------------------------------------------------
2. Is Django backend or front end?
Django is suitable for both the backend and frontend. 
It's a collection of Python libraries that allow you to develop useful web apps ideal for backend and frontend purposes.
-------------------------------------------------------------------------------------
3. What is the difference between Python and Django?
Both Python and Django are intertwined but not the same. Python is a programming language used for various application developments: machine learning, artificial intelligence, desktop apps, etc.

Django is a Python web framework used for full-stack app development and server development.

Using core Python, you can build an app from scratch or craft the app with Django using prewritten bits of code
-----------------------------------------------------------------------------------------------
4. What architecture does Django use?
Django follows a Model-View-Template (MVT) architecture. It contains three different parts:

Model: Logical data structure behind the entire app and signified by a database.
View: It's a user interface. What you see when you visit a website is called a user interface. Represented by HTML/CSS/Javascript files.
Template: Deals with the presentation of data.
--------------------------------------------------------------------------------------------
5. What are the advantages of Django?
Django has many advantages, but we'll look at major ones that differentiate it from other frameworks.

Better CDN connectivity and content management
Designed as batteries included framework
Supports MVC programming paradigm
Provides robust security features
Accelerated custom web app development 
Compatible with major operating systems and databases
------------------------------------------------------------------------------------------
6.What are Django Models?
A model is a definitive source of information about data, defined in the “app/models.py”. 

Models work as an abstraction layer that structures and manipulates data. 
Django models are a subclass of the "django.db.models".
 Model class and the attributes in the models represent database fields.
-----------------------------------------------------------------------------------------------
7.What’s the difference between a project and an app in Django?
The app is a module that deals with the dedicated requirements in a project.
On the other hand, the project covers an entire app.
In Django terms, a project can contain different apps, while an app features in various projects.
----------------------------------------------------------------------------------------------------
8.Name some companies using Django.
Various companies out there are using Django. Of them, major are Instagram, Pinterest, Udemy, Mozilla Firefox, Reddit, etc.
----------------------------------------------------------------------------------------------------------------------
9.Explain the file structure of a typical Django project.
A typical Django project consists of these four files:

manage.py
settings.py
__init__.py
urls.py
wsgi.py
The final four files are inside a directory, which is at the same level as manage.py.

manage.py is the command-line utility of your Django project and controls the Django project on the server.
settings.py file includes information on all the apps installed in the project.
The urls.py file acts as a map for the whole web project. 
The __init__.py file is an empty file that makes the python interpreter understand that the directory consisting of settings.py is a module/ package.
The wsgi.py file is for the server format WSGI
-------------------------------------------------------------------------------------------------------------
10.












1).Which of the following syntax will automatically add a Django generated token in to our templates
a).{% csrf_token %}
2.To create custom clean methods which of the following should be used
a).A prefix clean_followed by field name
---------------------------------------------------------------------------------------
model():
1.Which of the following classes should the Model form class extend/inherit?
a).ModelForm
----------------------------------------------------------------------------------
cookies:
1.Which of the following can be used to retrieve cookies that come in the HTTP Request
a).request.COOKIES
2.Which of the following methods can be used to test if the browser supports cookies?
a).1->set_test_cookie()
   2->test_cookie_worked()
   3->delete_test_cookie()
3.Which of the following will give the session expiry time in seconds?
a).session_expiry_age()