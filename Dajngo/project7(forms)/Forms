ROAD MAP
1.forms
2.views
3.settings
4.template-->html
( form.as_p,
  form.as_ul
  form.as_table
)
5.urls



HTML forms¶
In HTML, a form is a collection of elements inside <form>...</form>
that allow a visitor to do things like enter text, select options,
 manipulate objects or controls, and so on, and then send that information back to the server.


Some of these form interface elements - text input or checkboxes - are built into HTML itself. Others are much more complex; an interface that pops up a date picker or allows you to move a slider or manipulate controls will typically use JavaScript and CSS as well as HTML form <input> elements to achieve these effects.

As well as its <input> elements, a form must specify two things:

where: the URL to which the data corresponding to the user’s input should be returned
how: the HTTP method the data should be returned by
As an example, the login form for the Django admin contains several <input> elements: one of type="text" for the username, one of type="password" for the password, and one of type="submit" for the “Log in” button. It also contains some hidden text fields that the user doesn’t see, which Django uses to determine what to do next.

It also tells the browser that the form data should be sent to the URL specified in the <form>’s action attribute - /admin/ - and that it should be sent using the HTTP mechanism specified by the method attribute - post.


Browser(userInput)  while using post method

GET and POST are the only HTTP methods to use when dealing with forms.
Django Sevrever(facebook)

csrf----> {% csrf_token %} cross site request forgery ----> Additionally provide


Django’s role in forms¶
Handling forms is a complex business. Consider Django’s admin,
where numerous items of data of several different types may need to be prepared for display in a form, rendered as HTML, edited using a convenient interface, returned to the server, validated and cleaned up, and then saved or passed on for further processing.

Django’s form functionality can simplify and automate vast portions of this work, and can also do it more securely than most programmers would be able to do in code they wrote themselves.

Django handles three distinct parts of the work involved in forms:

preparing and restructuring data to make it ready for rendering
creating HTML forms for the data
receiving and processing submitted forms and data from the client
It is possible to write code that does all of this manually, but Django can take care of it all for you.
