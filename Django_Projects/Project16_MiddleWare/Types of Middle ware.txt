custom Middleware:
# class my_Middle:
#     def __init__(self,get_response):
#         pass
#     def __call__(self, request):
#         pass
#     def process_view(self,request,view_func,view_args,view_kwargs):
#     def process_exceptions(self,request,exception):
#     def process_template_response(self,request,response):


# Certainly, I'd be happy to explain each of the middleware classes you've listed:
#
# 1. `django.middleware.security.SecurityMiddleware`:
#    This middleware is responsible for adding various security-related HTTP headers to the response. These headers help protect the application against common web vulnerabilities. For instance, it can add headers like `X-XSS-Protection`, `X-Content-Type-Options`, `Strict-Transport-Security`, and more to enhance security and prevent certain types of attacks.
#
# 2. `django.contrib.sessions.middleware.SessionMiddleware`:
#    The SessionMiddleware is responsible for handling user sessions. It enables the usage of sessions in your Django application, allowing you to store and retrieve user-specific data between requests. It utilizes cookies or other session storage mechanisms to maintain session data.
#
# 3. `django.middleware.common.CommonMiddleware`:
#    This middleware performs several common HTTP behaviors, such as adding or removing trailing slashes from URLs, and handling redirections. It helps maintain consistent and user-friendly URLs by adjusting them as necessary.
#
# 4. `django.middleware.csrf.CsrfViewMiddleware`:
#    Cross-Site Request Forgery (CSRF) protection is a security mechanism that prevents malicious websites from executing actions on behalf of authenticated users. This middleware adds a CSRF token to forms in your templates, and the token is then validated when the form is submitted.
#
# 5. `django.contrib.auth.middleware.AuthenticationMiddleware`:
#    The AuthenticationMiddleware is responsible for associating a user object with the request based on the user's authentication status. If a user is authenticated, this middleware sets the `request.user` attribute, allowing you to access user-specific information and perform user-based operations.
#
# 6. `django.contrib.messages.middleware.MessageMiddleware`:
#    This middleware enables the usage of Django's messages framework. The messages framework allows you to store messages for users, such as success messages, error messages, etc., and display them on subsequent pages. It's commonly used to show feedback to users after a certain action has been performed.
#
# 7. `django.middleware.clickjacking.XFrameOptionsMiddleware`:
#    This middleware adds the `X-Frame-Options` header to responses, which helps prevent clickjacking attacks. Clickjacking involves embedding a website within a hidden iframe to trick users into performing actions they didn't intend. By setting this header, you can restrict how your site can be embedded in iframes on other websites.
#
# These middleware classes work together to provide various functionalities and enhance the security, usability, and overall behavior of your Django application. They demonstrate Django's approach to handling cross-cutting concerns in a modular and customizable manner.
